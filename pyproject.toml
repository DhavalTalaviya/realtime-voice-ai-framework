[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "realtime-voice-ai-framework"
version = "1.0.0"
description = "Production-grade streaming voice AI framework with real-time STT, LLM, and TTS orchestration"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Dhaval"}]
maintainers = [{name = "Dhaval"}]
requires-python = ">=3.10"
keywords = ["voice-ai", "real-time", "streaming", "speech-to-text", "text-to-speech", "llm", "ai-framework"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi>=0.111",
    "uvicorn[standard]>=0.30",
    "websockets>=12.0",
    "aiohttp>=3.9",
    "python-dotenv>=1.0",
    "numpy>=1.24",
    "soundfile>=0.12",
    "resampy>=0.4.3",
    "librosa>=0.10.0.post2",
    "webrtcvad>=2.0.10",
    "pyaudio>=0.2.14",
    "transformers>=4.41",
    "torch>=2.2",
    "TTS>=0.22.0",
    "openai>=1.30.0",
    "anthropic>=0.25.0",
]

[project.optional-dependencies]
offline = [
    "faster-whisper>=1.0.0",
]
cloud = [
    "pvorca>=2.0.0",
]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "ruff>=0.5.0",
    "mypy>=1.10",
    "black>=24.0",
    "isort>=5.13",
]
all = [
    "realtime-voice-ai-framework[offline,cloud,dev]"
]


[project.scripts]
voice-agent = "main:main"

[tool.setuptools]
packages = {find = {where = ["."], include = ["core*", "plugins*", "apps*"]}}
py-modules = ["agent","global_rules", "master_prompt"]

[tool.setuptools.package-data]
"*" = ["*.html", "*.yaml", "*.yml", "*.json"]

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true